---
- hosts: glauth
  vars:
    ansible_python_interpreter: /usr/bin/python3
    # see https://docs.ansible.com/ansible/latest/user_guide/become.html#risks-of-becoming-an-unprivileged-user
    ansible_common_remote_group: "{{pac}}"
    ansible_remote_tmp: ~/.ansible/tmp

  tasks:
  - name: Create user, domain and database
    import_tasks: tasks/hs_basis.yml

  #################################
  ## create directories
  #################################
  - name: create directory bin
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/bin"
      state: directory
  - name: create directory etc
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/etc"
      state: directory
  - name: create directory var/log
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/log"
      state: directory
  - name: create directory var/run
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/run"
      state: directory

  ##################################
  ## install glauth
  ##################################

  - name: install glauth
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      wget --no-verbose -O linuxamd64.zip https://github.com/glauth/glauth/releases/download/{{glauth_release}}/linuxamd64.zip || exit -1
      unzip linuxamd64.zip || exit -1
      rm -f linuxamd64.zip || exit -1
      chmod a+x glauth || exit -1
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}/bin"
      creates: "/home/pacs/{{pac}}/users/{{user}}/bin/glauth"

  ##################################
  ## configuration
  ##################################
  - name: upload glauth configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/etc/glauth.cfg" src="templates/glauth.cfg" mode=0600

  - name: upload demodata cfg file
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/etc/demodata.cfg" src="templates/demodata.cfg" mode=0600

  ##################################
  ## other software configuration
  ##################################
  - name: upload monit configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/.monitrc" src="templates/monitrc" mode=0600

  - name: upload logrotate configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/.logrotate" src="templates/logrotate" mode=0600

  - name: upload start script
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/bin" src="templates/glauth-start.sh" mode=0700
  - name: upload stop script
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/bin" src="templates/glauth-stop.sh" mode=0700

  ##################################
  ## initialize the database
  ##################################
  # TODO: somehow this does not work, I get: result: 50 Insufficient access
  # If this is enabled, change the -c parameter in glauth-start.sh to point to the glauth.cfg file, not to the directory which contains then the .sql file
  #- name: upload pgpass file
  #  become: yes
  #  become_user: "{{pac}}-{{user}}"
  #  template: dest="/home/pacs/{{pac}}/users/{{user}}/.pgpass" src="templates/pgpass" mode=0600
  #- name: upload demodata sql file
  #  become: yes
  #  become_user: "{{pac}}-{{user}}"
  #  template: dest="/home/pacs/{{pac}}/users/{{user}}/etc/demodata.sql" src="templates/demodata.sql" mode=0600
  #- name: initialize database
  #  become: yes
  #  become_user: "{{pac}}-{{user}}"
  #  shell: |
  #    bin/glauth-start.sh || exit -1
  #    sleep 10
  #    bin/glauth-stop.sh || exit -1
  #    psql --user {{pac}}_{{user}} < etc/demodata.sql || exit -1
  #    touch .ansible_db_initialized
  #  args:
  #    executable: /bin/bash
  #    chdir: "/home/pacs/{{pac}}/users/{{user}}/"
  #    creates: "/home/pacs/{{pac}}/users/{{user}}/.ansible_db_initialized"

  ####################################
  ## install cron jobs
  ####################################
  - name: start monit as cronjob
    become: yes
    become_user: "{{pac}}-{{user}}"
    cron:
      name: "start monit at reboot"
      special_time: reboot
      job: rm -f $HOME/var/run/* && /usr/bin/monit -c "$HOME/.monitrc"

  ##############################################
  ## start services via monit
  ##############################################
  - name: start monit
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      /usr/bin/monit -c ".monitrc"
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}/"
      creates: "/home/pacs/{{pac}}/users/{{user}}/var/run/monit.id"

